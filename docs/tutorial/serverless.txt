============================================
Deploy to Serverless AWS Lambda with BrefPHP
============================================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

.. versionadded:: 1.17

Overview
--------

BrefPHP allows to deploy serverless PHP applications on AWS Lambda.
In this tutorial, you will deploy a simple PHP application with the MongoDB PHP extension,
and connect to an Atlas cluster using AWS IAM authentication.

Pre-requisites
--------------

Before you begin, you must install BrefPHP on your machine. You can follow the
`official documentation to setup BrefPHP <https://bref.sh/docs/setup>`_.

Setup Bref deployment with mongodb extension
--------------------------------------------

Start by creating a new directory for your project and install the required dependencies.
This project will be a bare minimum PHP web application that connects to a MongoDB cluster,
no framework is used, but you can adapt the code to your needs.

.. code-block:: bash
    mkdir bref-mongodb-app && cd bref-mongodb-app
    composer init
    composer require bref/bref bref/extra-php-extensions
    vendor/bin/bref init

By default, BrefPHP will create a simple web application that renders a web page.
To validate the deployment, you can start by deploying the default application.

.. code-block:: bash
    serverless deploy



Replace the contents of ``index.php`` with the following:

.. literalinclude:: /examples/serverless-bref/index.php
   :language: php


BrefPHP provides a Lambda layer with PHP and some very common extensions.
Additional extensions are provided by the package [bref/extra-php-extension](https://github.com/brefphp/extra-php-extensions).

.. code-block:: yaml

    plugins:
        - ./vendor/bref/bref
        - ./vendor/bref/extra-php-extensions

    functions:
        api:
            handler: index.php
            runtime: php-83-fpm
            layers:
                - ${bref-extra:mongodb-php-83}


Deploy the application

    serverless deploy

The application will not work unless you provide a working MONGODB_URI variable.

AWS Credentials
---------------

Atlas supports passwordless authentication with AWS credentials.

Get the role of the deployed AWS Lambda.

Set Up unified AWS Access
https://www.mongodb.com/docs/atlas/security/set-up-unified-aws-access/

1. Open the lambda function in AWS console
2. In "Configuration > Permission", copy the "Role name"
3. Open the Atlas project
4. Go to "Security > Database Access"
5. Click "Add a new Database User"
6. Select Authentication Method: "AWS IAM", type "IAM Role" and paste the role name in "AWS Role ARN".
7. Add "Built-in Role": "Read and write any database"
8 Validate by clicking on "Add user".


Update the serverless.yml file to pass the environment variable ``MONGODB_URI``

.. code-block:: yaml

    provider:
        environment:
            MONGODB_URI: ${env:MONGODB_URI}


The value can be found in "Atlas > Deployment > Database > Connect". Select "3. AWS IAM".
You can remove the ``<AWS access key>:<AWS secret key>`` part from the URI, the
AWS SDK embedded in the MongoDB PHP Extension will request the metadata endpoint
to retrieve the credentials.

.. code-block:: bash

    MONGODB_URI=mongodb+srv://cluster0.abcdefg.mongodb.net/ serverless deploy
