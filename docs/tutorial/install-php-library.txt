=========================
Install the |php-library|
=========================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

The |php-library| is a high-level abstraction for the
`PHP driver <https://php.net/mongodb>`_ (i.e. ``mongodb`` extension). This page
will briefly explain how to install both the ``mongodb`` extension and the
|php-library|.

Installing the Extension
------------------------

Linux, Unix, and macOS users can either
:php:`install the extension with PECL <manual/en/mongodb.installation.pecl.php>`
(recommended) or
:php:`manually compile from source <manual/en/mongodb.installation.manual.php>`.
The following command may be used to install the extension with PECL:

.. code-block:: sh

   sudo pecl install mongodb

.. note::

   If the build process for either installation method fails to find a TLS
   library, check that the development packages (e.g. ``libssl-dev``) and
   `pkg-config <https://en.wikipedia.org/wiki/Pkg-config>`_ are both installed.

Once the extension is installed, add the following line to your ``php.ini``
file:

.. code-block:: ini

   extension=mongodb.so

Windows users can download precompiled binaries of the extension from
`PECL <https://pecl.php.net/package/mongodb>`_. After extracting the
``php_mongodb.dll`` file to PHP's extension directory, add the following line to
your ``php.ini`` file:

.. code-block:: ini

   extension=php_mongodb.dll

Additional considerations for Windows are discussed in the
:php:`Windows installation documentation <manual/en/mongodb.installation.windows.php>`.

Installing the Library
----------------------

Using Composer
~~~~~~~~~~~~~~

The preferred method of installing the |php-library| is with
`Composer <https://getcomposer.org/>`_ by running the following command from
your project root:

.. code-block:: sh

   composer require mongodb/mongodb

Once you have installed the library, ensure that your application includes
Composer's autoloader as in the following example:

.. code-block:: php

   <?php

   require_once __DIR__ . '/vendor/autoload.php';

Refer to Composer's `autoloading documentation
<https://getcomposer.org/doc/01-basic-usage.md#autoloading>`_ for more
information about setting up autoloading.

Manual Installation Without Composer
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

While not recommended, you may also manually install the library using a source
archive attached to the
`GitHub releases <https://github.com/mongodb/mongo-php-library/releases>`_. When
installing the library without Composer, you must ensure that all library
classes *and* functions are loaded for your application:

#. If you are using a `PSR-4 <https://www.php-fig.org/psr/psr-4/>`_ autoloader,
   map the top-level ``MongoDB\`` namespace to the ``src/`` directory. If you
   are not using an autoloader, manually require _all_ class files found
   recursively within the ``src/`` directory.

#. Regardless of whether you are using an autoloader, manually require the
   ``src/functions.php`` file. This is necessary because PHP does not support
   autoloading for functions.

Common Extension Installation Errors
------------------------------------

PHP Headers Not Found
~~~~~~~~~~~~~~~~~~~~~

For example:

.. code-block:: none

   /private/tmp/pear/install/mongodb/php_phongo.c:24:10: fatal error: 'php.h' file not found

   #include <php.h>
            ^~~~~~~

This error indicates that PHP's build system cannot find the necessary headers.
All PHP extensions require headers in order to compile. Additionally, those
headers must correspond to the PHP runtime for which the extension will be used.
Generally, the ``phpize`` command (invoked by ``pecl``) will ensure that the
extension builds with the correct headers.

Note that the mere presence of a PHP runtime does not mean that headers are
available. On various Linux distributions, headers are often published under a
separate ``php-dev`` or ``php-devel`` package. On macOS, the default PHP runtime
does not include headers and users typically need to install PHP (and headers)
via `Homebrew <https://brew.sh/>`_ in order to build an extension.

Multiple PHP Runtimes Installed
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

If your system has multiple versions of PHP installed, each version will have
its own ``pecl`` and ``phpize`` commands. Additionally, each PHP runtime may
have separate ``php.ini`` files for each SAPI (e.g. FPM, CLI). If the extension
has been installed but is not available at runtime, double-check that you have
used the correct ``pecl`` command and have modified the appropriate ``php.ini``
file(s).

If there is any doubt about the ``php.ini`` file being used by a PHP runtime,
you should examine the output of :php:`phpinfo() <phpinfo>` for that particular
SAPI. Additionally, :php:`php_ini_loaded_file() <php_ini_loaded_file>` and
:php:`php_ini_scanned_files() <php_ini_scanned_files>` may be used to determine
exactly which INI files have been loaded by PHP.

Loading an Incompatible DLL on Windows
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

PECL builds Windows binaries for various combinations of PHP version,
thread-safety (TS or NTS), and architecture (x86 or x64). Failure to select the
correct binary will result in an error when attempting to load the extension DLL
at runtime:

.. code-block:: none

   PHP Warning:  PHP Startup: Unable to load dynamic library 'mongodb'

Ensure that you have downloaded a DLL that corresponds to the following PHP
runtime properties:

- PHP version (``PHP_VERSION``)
- Thread-safety (``PHP_ZTS``)
- Architecture (``PHP_INT_SIZE``)

In addition to the aforementioned constants, these properties can also be
inferred from :php:`phpinfo() <phpinfo>`. If your system has multiple PHP
runtimes installed, double-check that you are examining the ``phpinfo()`` output
for the correct environment.
